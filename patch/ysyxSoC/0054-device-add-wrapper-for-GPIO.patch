From 3b759b7b6d189ce3c9f03e36dfa9a9e07cc4fed2 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Sun, 31 Dec 2023 21:34:22 +0800
Subject: [PATCH 54/74] device: add wrapper for GPIO

---
 perip/gpio/gpio_top_apb.v | 27 ++++++++++++++++++++
 src/SoC.scala             | 10 +++++++-
 src/Top.scala             |  1 +
 src/device/GPIO.scala     | 52 +++++++++++++++++++++++++++++++++++++++
 4 files changed, 89 insertions(+), 1 deletion(-)
 create mode 100644 perip/gpio/gpio_top_apb.v
 create mode 100644 src/device/GPIO.scala

diff --git a/perip/gpio/gpio_top_apb.v b/perip/gpio/gpio_top_apb.v
new file mode 100644
index 00000000..ec51ffe5
--- /dev/null
+++ b/perip/gpio/gpio_top_apb.v
@@ -0,0 +1,27 @@
+module gpio_top_apb(
+  input         clock,
+  input         reset,
+  input  [31:0] in_paddr,
+  input         in_psel,
+  input         in_penable,
+  input  [2:0]  in_pprot,
+  input         in_pwrite,
+  input  [31:0] in_pwdata,
+  input  [3:0]  in_pstrb,
+  output        in_pready,
+  output [31:0] in_prdata,
+  output        in_pslverr,
+
+  output [15:0] gpio_out,
+  input  [15:0] gpio_in,
+  output [7:0]  gpio_seg_0,
+  output [7:0]  gpio_seg_1,
+  output [7:0]  gpio_seg_2,
+  output [7:0]  gpio_seg_3,
+  output [7:0]  gpio_seg_4,
+  output [7:0]  gpio_seg_5,
+  output [7:0]  gpio_seg_6,
+  output [7:0]  gpio_seg_7
+);
+
+endmodule
diff --git a/src/SoC.scala b/src/SoC.scala
index df893c69..23ca5879 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -31,6 +31,7 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val chiplinkNode = if (Config.hasChipLink) Some(AXI4SlaveNodeGenerator(p(ExtBus), ChipLinkParam.allSpace)) else None
 
   val luart = LazyModule(new APBUart16550(AddressSet.misaligned(0x10000000, 0x1000)))
+  val lgpio = LazyModule(new APBGPIO(AddressSet.misaligned(0x10002000, 0x10)))
   val lspi  = LazyModule(new APBSPI(
     AddressSet.misaligned(0x10001000, 0x1000) ++    // SPI controller
     AddressSet.misaligned(0x30000000, 0x10000000)   // XIP flash
@@ -40,7 +41,7 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val sramNode = AXI4RAM(AddressSet.misaligned(0x0f000000, 0x2000).head, false, true, 8, None, Nil, false)
   val lsdram = LazyModule(new APBSDRAM(AddressSet.misaligned(0xa0000000L, 0x2000000)))
 
-  List(lspi.node, luart.node, lpsram.node, lsdram.node).map(_ := apbxbar)
+  List(lspi.node, luart.node, lpsram.node, lsdram.node, lgpio.node).map(_ := apbxbar)
   List(apbxbar := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar)
   if (Config.hasChipLink) chiplinkNode.get := xbar
   xbar := cpu.masterNode
@@ -74,10 +75,12 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
     val uart = IO(chiselTypeOf(luart.module.uart))
     val psram = IO(chiselTypeOf(lpsram.module.qspi_bundle))
     val sdram = IO(chiselTypeOf(lsdram.module.sdram_bundle))
+    val gpio = IO(chiselTypeOf(lgpio.module.gpio_bundle))
     uart <> luart.module.uart
     spi <> lspi.module.spi_bundle
     psram <> lpsram.module.qspi_bundle
     sdram <> lsdram.module.sdram_bundle
+    gpio <> lgpio.module.gpio_bundle
   }
 }
 
@@ -126,5 +129,10 @@ class ysyxSoCFull(implicit p: Parameters) extends LazyModule {
     psram.io <> masic.psram
     val sdram = Module(new sdram)
     sdram.io <> masic.sdram
+
+    val externalPins = IO(new Bundle{
+      val gpio = chiselTypeOf(masic.gpio)
+    })
+    externalPins.gpio <> masic.gpio
   }
 }
diff --git a/src/Top.scala b/src/Top.scala
index fc5b5716..4b0a03a0 100644
--- a/src/Top.scala
+++ b/src/Top.scala
@@ -16,6 +16,7 @@ class ysyxSoCTop extends Module {
   val dut = LazyModule(new ysyxSoCFull)
   val mdut = Module(dut.module)
   mdut.dontTouchPorts()
+  mdut.externalPins := DontCare
 }
 
 object Elaborate extends App {
diff --git a/src/device/GPIO.scala b/src/device/GPIO.scala
new file mode 100644
index 00000000..f770e96a
--- /dev/null
+++ b/src/device/GPIO.scala
@@ -0,0 +1,52 @@
+package ysyx
+
+import chisel3._
+import chisel3.util._
+
+import freechips.rocketchip.amba.apb._
+import org.chipsalliance.cde.config.Parameters
+import freechips.rocketchip.diplomacy._
+import freechips.rocketchip.util._
+
+class GPIOIO extends Bundle {
+  val out = Output(UInt(16.W))
+  val in = Input(UInt(16.W))
+  val seg = Output(Vec(8, UInt(8.W)))
+}
+
+class GPIOCtrlIO extends Bundle {
+  val clock = Input(Clock())
+  val reset = Input(Reset())
+  val in = Flipped(new APBBundle(APBBundleParameters(addrBits = 32, dataBits = 32)))
+  val gpio = new GPIOIO
+}
+
+class gpio_top_apb extends BlackBox {
+  val io = IO(new GPIOCtrlIO)
+}
+
+class gpioChisel extends Module {
+  val io = IO(new GPIOCtrlIO)
+}
+
+class APBGPIO(address: Seq[AddressSet])(implicit p: Parameters) extends LazyModule {
+  val node = APBSlaveNode(Seq(APBSlavePortParameters(
+    Seq(APBSlaveParameters(
+      address       = address,
+      executable    = true,
+      supportsRead  = true,
+      supportsWrite = true)),
+    beatBytes  = 4)))
+
+  lazy val module = new Impl
+  class Impl extends LazyModuleImp(this) {
+    val (in, _) = node.in(0)
+    val gpio_bundle = IO(new GPIOIO)
+
+    val mgpio = Module(new gpio_top_apb)
+    mgpio.io.clock := clock
+    mgpio.io.reset := reset
+    mgpio.io.in <> in
+    gpio_bundle <> mgpio.io.gpio
+  }
+}
-- 
2.34.1

