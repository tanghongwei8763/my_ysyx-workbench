From cae42cf937edc482af76611a54cc1d8488f080b5 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Sun, 14 Apr 2024 23:48:40 +0800
Subject: [PATCH 62/74] SoC: use config to determine the bus interface of SDRAM

---
 src/SoC.scala | 20 +++++++++++++++-----
 src/Top.scala |  1 +
 2 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/src/SoC.scala b/src/SoC.scala
index 6b99a897..cd9976fb 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -25,6 +25,7 @@ object AXI4SlaveNodeGenerator {
 
 class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val xbar = AXI4Xbar()
+  val xbar2 = AXI4Xbar()
   val apbxbar = LazyModule(new APBFanout).node
   val cpu = LazyModule(new CPU(idBits = ChipLinkParam.idBits))
   val chipMaster = if (Config.hasChipLink) Some(LazyModule(new ChipLinkMaster)) else None
@@ -41,10 +42,16 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val lpsram = LazyModule(new APBPSRAM(AddressSet.misaligned(0x80000000L, 0x400000)))
   val lmrom = LazyModule(new AXI4MROM(AddressSet.misaligned(0x20000000, 0x1000)))
   val sramNode = AXI4RAM(AddressSet.misaligned(0x0f000000, 0x2000).head, false, true, 8, None, Nil, false)
-  val lsdram = LazyModule(new APBSDRAM(AddressSet.misaligned(0xa0000000L, 0x2000000)))
 
-  List(lspi.node, luart.node, lpsram.node, lsdram.node, lgpio.node, lkeyboard.node, lvga.node).map(_ := apbxbar)
-  List(apbxbar := APBDelayer() := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar)
+  val sdramAddressSet = AddressSet.misaligned(0xa0000000L, 0x2000000)
+  val lsdram_apb = if (!Config.sdramUseAXI) Some(LazyModule(new APBSDRAM (sdramAddressSet))) else None
+  val lsdram_axi = if ( Config.sdramUseAXI) Some(LazyModule(new AXI4SDRAM(sdramAddressSet))) else None
+
+  List(lspi.node, luart.node, lpsram.node, lgpio.node, lkeyboard.node, lvga.node).map(_ := apbxbar)
+  List(apbxbar := APBDelayer() := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar2)
+  xbar2 := AXI4UserYanker(Some(1)) := AXI4Fragmenter() := xbar
+  if (Config.sdramUseAXI) lsdram_axi.get.node := xbar
+  else                    lsdram_apb.get.node := apbxbar
   if (Config.hasChipLink) chiplinkNode.get := xbar
   xbar := cpu.masterNode
 
@@ -72,18 +79,21 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
     val intr_from_chipSlave = IO(Input(Bool()))
     cpu.module.interrupt := intr_from_chipSlave
 
+    val sdramBundle = if (Config.sdramUseAXI) lsdram_axi.get.module.sdram_bundle
+                      else                    lsdram_apb.get.module.sdram_bundle
+
     // expose slave I/O interface as ports
     val spi = IO(chiselTypeOf(lspi.module.spi_bundle))
     val uart = IO(chiselTypeOf(luart.module.uart))
     val psram = IO(chiselTypeOf(lpsram.module.qspi_bundle))
-    val sdram = IO(chiselTypeOf(lsdram.module.sdram_bundle))
+    val sdram = IO(chiselTypeOf(sdramBundle))
     val gpio = IO(chiselTypeOf(lgpio.module.gpio_bundle))
     val ps2 = IO(chiselTypeOf(lkeyboard.module.ps2_bundle))
     val vga = IO(chiselTypeOf(lvga.module.vga_bundle))
     uart <> luart.module.uart
     spi <> lspi.module.spi_bundle
     psram <> lpsram.module.qspi_bundle
-    sdram <> lsdram.module.sdram_bundle
+    sdram <> sdramBundle
     gpio <> lgpio.module.gpio_bundle
     ps2 <> lkeyboard.module.ps2_bundle
     vga <> lvga.module.vga_bundle
diff --git a/src/Top.scala b/src/Top.scala
index 4b0a03a0..4d562216 100644
--- a/src/Top.scala
+++ b/src/Top.scala
@@ -7,6 +7,7 @@ import freechips.rocketchip.diplomacy.LazyModule
 
 object Config {
   def hasChipLink: Boolean = false
+  def sdramUseAXI: Boolean = false
 }
 
 class ysyxSoCTop extends Module {
-- 
2.34.1

