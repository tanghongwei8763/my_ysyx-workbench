From ac8c7414af58ea0a004dd29b0bb4c0ba05aca165 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Thu, 21 Dec 2023 16:07:24 +0800
Subject: [PATCH 42/74] device: add sdram

---
 perip/sdram/sdram.v         | 16 ++++++
 perip/sdram/sdram_top_axi.v | 99 +++++++++++++++++++++++++++++++++++++
 src/SoC.scala               |  7 ++-
 src/device/SDRAM.scala      | 61 +++++++++++++++++++++++
 4 files changed, 182 insertions(+), 1 deletion(-)
 create mode 100644 perip/sdram/sdram.v
 create mode 100644 perip/sdram/sdram_top_axi.v
 create mode 100644 src/device/SDRAM.scala

diff --git a/perip/sdram/sdram.v b/perip/sdram/sdram.v
new file mode 100644
index 00000000..3613b231
--- /dev/null
+++ b/perip/sdram/sdram.v
@@ -0,0 +1,16 @@
+module sdram(
+  input        clk,
+  input        cke,
+  input        cs,
+  input        ras,
+  input        cas,
+  input        we,
+  input [12:0] a,
+  input [ 1:0] ba,
+  input [ 1:0] dqm,
+  inout [15:0] dq
+);
+
+  assign dq = 16'bz;
+
+endmodule
diff --git a/perip/sdram/sdram_top_axi.v b/perip/sdram/sdram_top_axi.v
new file mode 100644
index 00000000..f0fd6fdb
--- /dev/null
+++ b/perip/sdram/sdram_top_axi.v
@@ -0,0 +1,99 @@
+module sdram_top_axi(
+  input         clock,
+  input         reset,
+  output        in_awready,
+  input         in_awvalid,
+  input  [31:0] in_awaddr,
+  input  [3:0]  in_awid,
+  input  [7:0]  in_awlen,
+  input  [2:0]  in_awsize,
+  input  [1:0]  in_awburst,
+  output        in_wready,
+  input         in_wvalid,
+  input  [31:0] in_wdata,
+  input  [3:0]  in_wstrb,
+  input         in_wlast,
+  input         in_bready,
+  output        in_bvalid,
+  output [1:0]  in_bresp,
+  output [3:0]  in_bid,
+  output        in_arready,
+  input         in_arvalid,
+  input  [31:0] in_araddr,
+  input  [3:0]  in_arid,
+  input  [7:0]  in_arlen,
+  input  [2:0]  in_arsize,
+  input  [1:0]  in_arburst,
+  input         in_rready,
+  output        in_rvalid,
+  output [1:0]  in_rresp,
+  output [31:0] in_rdata,
+  output        in_rlast,
+  output [3:0]  in_rid,
+
+  output        sdram_clk,
+  output        sdram_cke,
+  output        sdram_cs,
+  output        sdram_ras,
+  output        sdram_cas,
+  output        sdram_we,
+  output [12:0] sdram_a,
+  output [ 1:0] sdram_ba,
+  output [ 1:0] sdram_dqm,
+  inout  [15:0] sdram_dq
+);
+
+  wire sdram_dout_en;
+  wire [15:0] sdram_dout;
+  assign sdram_dq = sdram_dout_en ? sdram_dout : 16'bz;
+  sdram_axi #(
+    .SDRAM_MHZ(100),
+    .SDRAM_ADDR_W(24),
+    .SDRAM_COL_W(9),
+    .SDRAM_READ_LATENCY(2)
+  ) u_sdram_axi(
+    .clk_i(clock),
+    .rst_i(reset),
+    .inport_awvalid_i(in_awvalid),
+    .inport_awaddr_i(in_awaddr),
+    .inport_awid_i(in_awid),
+    .inport_awlen_i(in_awlen),
+    .inport_awburst_i(in_awburst),
+    .inport_wvalid_i(in_wvalid),
+    .inport_wdata_i(in_wdata),
+    .inport_wstrb_i(in_wstrb),
+    .inport_wlast_i(in_wlast),
+    .inport_bready_i(in_bready),
+    .inport_arvalid_i(in_arvalid),
+    .inport_araddr_i(in_araddr),
+    .inport_arid_i(in_arid),
+    .inport_arlen_i(in_arlen),
+    .inport_arburst_i(in_arburst),
+    .inport_rready_i(in_rready),
+
+    .inport_awready_o(in_awready),
+    .inport_wready_o(in_wready),
+    .inport_bvalid_o(in_bvalid),
+    .inport_bresp_o(in_bresp),
+    .inport_bid_o(in_bid),
+    .inport_arready_o(in_arready),
+    .inport_rvalid_o(in_rvalid),
+    .inport_rdata_o(in_rdata),
+    .inport_rresp_o(in_rresp),
+    .inport_rid_o(in_rid),
+    .inport_rlast_o(in_rlast),
+    .sdram_clk_o(sdram_clk),
+    .sdram_cke_o(sdram_cke),
+    .sdram_cs_o(sdram_cs),
+    .sdram_ras_o(sdram_ras),
+    .sdram_cas_o(sdram_cas),
+    .sdram_we_o(sdram_we),
+    .sdram_dqm_o(sdram_dqm),
+    .sdram_addr_o(sdram_a),
+    .sdram_ba_o(sdram_ba),
+    .sdram_data_input_i(sdram_dq),
+    .sdram_data_output_o(sdram_dout),
+    .sdram_data_out_en_o(sdram_dout_en)
+  );
+
+endmodule
diff --git a/src/SoC.scala b/src/SoC.scala
index 893803a1..eff3e9e2 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -38,9 +38,10 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val lpsram = LazyModule(new APBPSRAM(AddressSet.misaligned(0x80000000L, 0x400000)))
   val lmrom = LazyModule(new AXI4MROM(AddressSet.misaligned(0x20000000, 0x1000)))
   val sramNode = AXI4RAM(AddressSet.misaligned(0x0f000000, 0x2000).head, false, true, 8, None, Nil, false)
+  val lsdram = LazyModule(new AXI4SDRAM(AddressSet.misaligned(0xa0000000L, 0x2000000)))
 
   List(lspi.node, luart.node, lpsram.node).map(_ := apbxbar)
-  List(apbxbar := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar)
+  List(apbxbar := AXI4ToAPB(), lmrom.node, sramNode, lsdram.node).map(_ := xbar)
   if (Config.hasChipLink) chiplinkNode.get := xbar
   xbar := cpu.masterNode
 
@@ -72,9 +73,11 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
     val spi = IO(chiselTypeOf(lspi.module.spi_bundle))
     val uart = IO(chiselTypeOf(luart.module.uart))
     val psram = IO(chiselTypeOf(lpsram.module.qspi_bundle))
+    val sdram = IO(chiselTypeOf(lsdram.module.sdram_bundle))
     uart <> luart.module.uart
     spi <> lspi.module.spi_bundle
     psram <> lpsram.module.qspi_bundle
+    sdram <> lsdram.module.sdram_bundle
   }
 }
 
@@ -121,5 +124,7 @@ class ysyxSoCFull(implicit p: Parameters) extends LazyModule {
 
     val psram = Module(new psram)
     psram.io <> masic.psram
+    val sdram = Module(new sdram)
+    sdram.io <> masic.sdram
   }
 }
diff --git a/src/device/SDRAM.scala b/src/device/SDRAM.scala
new file mode 100644
index 00000000..783487d6
--- /dev/null
+++ b/src/device/SDRAM.scala
@@ -0,0 +1,61 @@
+package ysyx
+
+import chisel3._
+import chisel3.util._
+import chisel3.experimental.Analog
+
+import freechips.rocketchip.amba.axi4._
+import org.chipsalliance.cde.config.Parameters
+import freechips.rocketchip.diplomacy._
+import freechips.rocketchip.util._
+
+class SDRAMIO extends Bundle {
+  val clk = Output(Bool())
+  val cke = Output(Bool())
+  val cs  = Output(Bool())
+  val ras = Output(Bool())
+  val cas = Output(Bool())
+  val we  = Output(Bool())
+  val a   = Output(UInt(13.W))
+  val ba  = Output(UInt(2.W))
+  val dqm = Output(UInt(2.W))
+  val dq  = Analog(16.W)
+}
+
+class sdram_top_axi extends BlackBox {
+  val io = IO(new Bundle {
+    val clock = Input(Clock())
+    val reset = Input(Bool())
+    val in = Flipped(new AXI4Bundle(AXI4BundleParameters(addrBits = 32, dataBits = 32, idBits = 4)))
+    val sdram = new SDRAMIO
+  })
+}
+
+class sdram extends BlackBox {
+  val io = IO(Flipped(new SDRAMIO))
+}
+
+class AXI4SDRAM(address: Seq[AddressSet])(implicit p: Parameters) extends LazyModule {
+  val beatBytes = 8
+  val node = AXI4SlaveNode(Seq(AXI4SlavePortParameters(
+    Seq(AXI4SlaveParameters(
+        address       = address,
+        executable    = true,
+        supportsWrite = TransferSizes(1, beatBytes),
+        supportsRead  = TransferSizes(1, beatBytes),
+        interleavedId = Some(0))
+    ),
+    beatBytes  = beatBytes)))
+
+  lazy val module = new Impl
+  class Impl extends LazyModuleImp(this) {
+    val (in, _) = node.in(0)
+    val sdram_bundle = IO(new SDRAMIO)
+
+    val msdram = Module(new sdram_top_axi)
+    msdram.io.clock := clock
+    msdram.io.reset := reset.asBool
+    msdram.io.in <> in
+    sdram_bundle <> msdram.io.sdram
+  }
+}
-- 
2.34.1

