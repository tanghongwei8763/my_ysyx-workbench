From 4e3d137e9a5dbeca9d848575c66bf4847c6e67d4 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Mon, 25 Dec 2023 01:50:06 +0800
Subject: [PATCH 43/74] device,SDRAM: add version of APB interface

---
 perip/sdram/sdram_top_apb.v | 78 +++++++++++++++++++++++++++++++++++++
 src/SoC.scala               |  6 +--
 src/device/SDRAM.scala      | 32 +++++++++++++++
 3 files changed, 113 insertions(+), 3 deletions(-)
 create mode 100644 perip/sdram/sdram_top_apb.v

diff --git a/perip/sdram/sdram_top_apb.v b/perip/sdram/sdram_top_apb.v
new file mode 100644
index 00000000..bd45389a
--- /dev/null
+++ b/perip/sdram/sdram_top_apb.v
@@ -0,0 +1,78 @@
+module sdram_top_apb (
+  input         clock,
+  input         reset,
+  input  [31:0] in_paddr,
+  input         in_psel,
+  input         in_penable,
+  input  [2:0]  in_pprot,
+  input         in_pwrite,
+  input  [31:0] in_pwdata,
+  input  [3:0]  in_pstrb,
+  output        in_pready,
+  output [31:0] in_prdata,
+  output        in_pslverr,
+
+  output        sdram_clk,
+  output        sdram_cke,
+  output        sdram_cs,
+  output        sdram_ras,
+  output        sdram_cas,
+  output        sdram_we,
+  output [12:0] sdram_a,
+  output [ 1:0] sdram_ba,
+  output [ 1:0] sdram_dqm,
+  inout  [15:0] sdram_dq
+);
+
+  wire sdram_dout_en;
+  wire [15:0] sdram_dout;
+  assign sdram_dq = sdram_dout_en ? sdram_dout : 16'bz;
+
+  typedef enum [0:0] { ST_IDLE, ST_WAIT_ACK } state_t;
+  reg state;
+  wire req_accept;
+
+  always @(posedge clock) begin
+    if (reset) state <= ST_IDLE;
+    else
+      case (state)
+        ST_IDLE: if (in_psel && in_penable && req_accept) state <= ST_WAIT_ACK;
+        ST_WAIT_ACK : if (in_pready) state <= ST_IDLE;
+      endcase
+  end
+
+  wire is_read  = (state == ST_IDLE) && in_psel && in_penable && !in_pwrite;
+  wire is_write = (state == ST_IDLE) && in_psel && in_penable &&  in_pwrite;
+  sdram_axi_core #(
+    .SDRAM_MHZ(100),
+    .SDRAM_ADDR_W(24),
+    .SDRAM_COL_W(9),
+    .SDRAM_READ_LATENCY(2)
+  ) u_sdram_axi(
+    .clk_i(clock),
+    .rst_i(reset),
+    .inport_wr_i(is_write ? in_pstrb : 4'b0),
+    .inport_rd_i(is_read),
+    .inport_len_i(0),
+    .inport_addr_i(in_paddr),
+    .inport_write_data_i(in_pwdata),
+    .inport_accept_o(req_accept),
+    .inport_ack_o(in_pready),
+    .inport_error_o(in_pslverr),
+    .inport_read_data_o(in_prdata),
+
+    .sdram_clk_o(sdram_clk),
+    .sdram_cke_o(sdram_cke),
+    .sdram_cs_o(sdram_cs),
+    .sdram_ras_o(sdram_ras),
+    .sdram_cas_o(sdram_cas),
+    .sdram_we_o(sdram_we),
+    .sdram_dqm_o(sdram_dqm),
+    .sdram_addr_o(sdram_a),
+    .sdram_ba_o(sdram_ba),
+    .sdram_data_input_i(sdram_dq),
+    .sdram_data_output_o(sdram_dout),
+    .sdram_data_out_en_o(sdram_dout_en)
+  );
+
+endmodule
diff --git a/src/SoC.scala b/src/SoC.scala
index eff3e9e2..df893c69 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -38,10 +38,10 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val lpsram = LazyModule(new APBPSRAM(AddressSet.misaligned(0x80000000L, 0x400000)))
   val lmrom = LazyModule(new AXI4MROM(AddressSet.misaligned(0x20000000, 0x1000)))
   val sramNode = AXI4RAM(AddressSet.misaligned(0x0f000000, 0x2000).head, false, true, 8, None, Nil, false)
-  val lsdram = LazyModule(new AXI4SDRAM(AddressSet.misaligned(0xa0000000L, 0x2000000)))
+  val lsdram = LazyModule(new APBSDRAM(AddressSet.misaligned(0xa0000000L, 0x2000000)))
 
-  List(lspi.node, luart.node, lpsram.node).map(_ := apbxbar)
-  List(apbxbar := AXI4ToAPB(), lmrom.node, sramNode, lsdram.node).map(_ := xbar)
+  List(lspi.node, luart.node, lpsram.node, lsdram.node).map(_ := apbxbar)
+  List(apbxbar := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar)
   if (Config.hasChipLink) chiplinkNode.get := xbar
   xbar := cpu.masterNode
 
diff --git a/src/device/SDRAM.scala b/src/device/SDRAM.scala
index 783487d6..9287d167 100644
--- a/src/device/SDRAM.scala
+++ b/src/device/SDRAM.scala
@@ -5,6 +5,7 @@ import chisel3.util._
 import chisel3.experimental.Analog
 
 import freechips.rocketchip.amba.axi4._
+import freechips.rocketchip.amba.apb._
 import org.chipsalliance.cde.config.Parameters
 import freechips.rocketchip.diplomacy._
 import freechips.rocketchip.util._
@@ -31,6 +32,15 @@ class sdram_top_axi extends BlackBox {
   })
 }
 
+class sdram_top_apb extends BlackBox {
+  val io = IO(new Bundle {
+    val clock = Input(Clock())
+    val reset = Input(Bool())
+    val in = Flipped(new APBBundle(APBBundleParameters(addrBits = 32, dataBits = 32)))
+    val sdram = new SDRAMIO
+  })
+}
+
 class sdram extends BlackBox {
   val io = IO(Flipped(new SDRAMIO))
 }
@@ -59,3 +69,25 @@ class AXI4SDRAM(address: Seq[AddressSet])(implicit p: Parameters) extends LazyMo
     sdram_bundle <> msdram.io.sdram
   }
 }
+
+class APBSDRAM(address: Seq[AddressSet])(implicit p: Parameters) extends LazyModule {
+  val node = APBSlaveNode(Seq(APBSlavePortParameters(
+    Seq(APBSlaveParameters(
+      address       = address,
+      executable    = true,
+      supportsRead  = true,
+      supportsWrite = true)),
+    beatBytes  = 4)))
+
+  lazy val module = new Impl
+  class Impl extends LazyModuleImp(this) {
+    val (in, _) = node.in(0)
+    val sdram_bundle = IO(new SDRAMIO)
+
+    val msdram = Module(new sdram_top_apb)
+    msdram.io.clock := clock
+    msdram.io.reset := reset.asBool
+    msdram.io.in <> in
+    sdram_bundle <> msdram.io.sdram
+  }
+}
-- 
2.34.1

