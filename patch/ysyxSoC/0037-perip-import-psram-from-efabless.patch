From d8e98d62f862ee6e316f8ca22045507ee3450dc2 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Tue, 19 Dec 2023 10:11:41 +0800
Subject: [PATCH 37/74] perip: import psram from efabless

---
 perip/psram/efabless/EF_PSRAM_CTRL.v    | 236 ++++++++++++++++++++++++
 perip/psram/efabless/EF_PSRAM_CTRL_wb.v | 170 +++++++++++++++++
 perip/psram/efabless/LICENSE            | 201 ++++++++++++++++++++
 3 files changed, 607 insertions(+)
 create mode 100644 perip/psram/efabless/EF_PSRAM_CTRL.v
 create mode 100644 perip/psram/efabless/EF_PSRAM_CTRL_wb.v
 create mode 100644 perip/psram/efabless/LICENSE

diff --git a/perip/psram/efabless/EF_PSRAM_CTRL.v b/perip/psram/efabless/EF_PSRAM_CTRL.v
new file mode 100644
index 00000000..3564858a
--- /dev/null
+++ b/perip/psram/efabless/EF_PSRAM_CTRL.v
@@ -0,0 +1,236 @@
+/*
+	Copyright 2020 Efabless Corp.
+
+	Author: Mohamed Shalan (mshalan@efabless.com)
+
+	Licensed under the Apache License, Version 2.0 (the "License");
+	you may not use this file except in compliance with the License.
+	You may obtain a copy of the License at:
+	http://www.apache.org/licenses/LICENSE-2.0
+	Unless required by applicable law or agreed to in writing, software
+	distributed under the License is distributed on an "AS IS" BASIS,
+	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+	See the License for the specific language governing permissions and
+	limitations under the License.
+*/
+/*
+    QSPI PSRAM Controller
+
+    Pseudostatic RAM (PSRAM) is DRAM combined with a self-refresh circuit.
+    It appears externally as slower SRAM, albeit with a density/cost advantage
+    over true SRAM, and without the access complexity of DRAM.
+
+    The controller was designed after https://www.issi.com/WW/pdf/66-67WVS4M8ALL-BLL.pdf
+    utilizing both EBh and 38h commands for reading and writting.
+
+    Benchmark data collected using CM0 CPU when memory is PSRAM only
+
+        Benchmark       PSRAM (us)  1-cycle SRAM (us)   Slow-down
+        ---------       ----------  -----------------   ---------
+        xtea            840         212                 3.94
+        stress          1607        446                 3.6
+        hash            5340        1281                4.16
+        chacha          2814        320                 8.8
+        aes sbox        2370        322                 7.3
+        nqueens         3496        459                 7.6
+        mtrans          2171        2034                1.06
+        rle             903         155                 5.8
+        prime           549         97                  5.66
+*/
+
+`timescale              1ns/1ps
+`default_nettype        none
+
+module PSRAM_READER (
+    input   wire            clk,
+    input   wire            rst_n,
+    input   wire [23:0]     addr,
+    input   wire            rd,
+    input   wire [2:0]      size,
+    output  wire            done,
+    output  wire [31:0]     line,
+
+    output  reg             sck,
+    output  reg             ce_n,
+    input   wire [3:0]      din,
+    output  wire [3:0]      dout,
+    output  wire            douten
+);
+
+    localparam  IDLE = 1'b0,
+                READ = 1'b1;
+
+    wire [7:0]  FINAL_COUNT = 19 + size*2; // was 27: Always read 1 word
+
+    reg         state, nstate;
+    reg [7:0]   counter;
+    reg [23:0]  saddr;
+    reg [7:0]   data [3:0];
+
+    wire[7:0]   CMD_EBH = 8'heb;
+
+    always @*
+        case (state)
+            IDLE: if(rd) nstate = READ; else nstate = IDLE;
+            READ: if(done) nstate = IDLE; else nstate = READ;
+        endcase
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n) state = IDLE;
+        else state <= nstate;
+
+    // Drive the Serial Clock (sck) @ clk/2
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            sck <= 1'b0;
+        else if(~ce_n)
+            sck <= ~ sck;
+        else if(state == IDLE)
+            sck <= 1'b0;
+
+    // ce_n logic
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            ce_n <= 1'b1;
+        else if(state == READ)
+            ce_n <= 1'b0;
+        else
+            ce_n <= 1'b1;
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            counter <= 8'b0;
+        else if(sck & ~done)
+            counter <= counter + 1'b1;
+        else if(state == IDLE)
+            counter <= 8'b0;
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            saddr <= 24'b0;
+        else if((state == IDLE) && rd)
+            //saddr <= {addr[23:2], 2'b0};
+            saddr <= {addr[23:0]};
+
+    // Sample with the negedge of sck
+    wire[7:0] byte_index = counter/2 - 10;
+    always @ (posedge clk)
+        if(counter >= 20 && counter <= FINAL_COUNT)
+            if(sck)
+                data[byte_index] <= {data[byte_index][3:0], din}; // Optimize!
+
+    assign dout     =   (counter < 8)   ?   CMD_EBH[7 - counter]:
+                        (counter == 8)  ?   saddr[23:20]        :
+                        (counter == 9)  ?   saddr[19:16]        :
+                        (counter == 10) ?   saddr[15:12]        :
+                        (counter == 11) ?   saddr[11:8]         :
+                        (counter == 12) ?   saddr[7:4]          :
+                        (counter == 13) ?   saddr[3:0]          :
+                        4'h0;
+
+    assign douten   = (counter < 14);
+
+    assign done     = (counter == FINAL_COUNT+1);
+
+    generate
+        genvar i;
+        for(i=0; i<4; i=i+1)
+            assign line[i*8+7: i*8] = data[i];
+    endgenerate
+
+
+endmodule
+
+// Using 38H Command
+module PSRAM_WRITER (
+    input   wire            clk,
+    input   wire            rst_n,
+    input   wire [23:0]     addr,
+    input   wire [31: 0]    line,
+    input   wire [2:0]      size,
+    input   wire            wr,
+    output  wire            done,
+
+    output  reg             sck,
+    output  reg             ce_n,
+    input   wire [3:0]      din,
+    output  wire [3:0]      dout,
+    output  wire            douten
+);
+    localparam  DATA_START = 14;
+    localparam  IDLE = 1'b0,
+                READ = 1'b1;
+
+    wire[7:0]        FINAL_COUNT = 13 + size*2;
+
+    reg         state, nstate;
+    reg [7:0]   counter;
+    reg [23:0]  saddr;
+    reg [7:0]   data [3:0];
+
+    wire[7:0]   CMD_38H = 8'h38;
+
+    always @*
+        case (state)
+            IDLE: if(wr) nstate = READ; else nstate = IDLE;
+            READ: if(done) nstate = IDLE; else nstate = READ;
+        endcase
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n) state = IDLE;
+        else state <= nstate;
+
+    // Drive the Serial Clock (sck) @ clk/2
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            sck <= 1'b0;
+        else if(~ce_n)
+            sck <= ~ sck;
+        else if(state == IDLE)
+            sck <= 1'b0;
+
+    // ce_n logic
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            ce_n <= 1'b1;
+        else if(state == READ)
+            ce_n <= 1'b0;
+        else
+            ce_n <= 1'b1;
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            counter <= 8'b0;
+        else if(sck & ~done)
+            counter <= counter + 1'b1;
+        else if(state == IDLE)
+            counter <= 8'b0;
+
+    always @ (posedge clk or negedge rst_n)
+        if(!rst_n)
+            saddr <= 24'b0;
+        else if((state == IDLE) && wr)
+            saddr <= addr;
+
+    assign dout     =   (counter < 8)   ?   CMD_38H[7 - counter]:
+                        (counter == 8)  ?   saddr[23:20]        :
+                        (counter == 9)  ?   saddr[19:16]        :
+                        (counter == 10) ?   saddr[15:12]        :
+                        (counter == 11) ?   saddr[11:8]         :
+                        (counter == 12) ?   saddr[7:4]          :
+                        (counter == 13) ?   saddr[3:0]          :
+                        (counter == 14) ?   line[7:4]           :
+                        (counter == 15) ?   line[3:0]           :
+                        (counter == 16) ?   line[15:12]         :
+                        (counter == 17) ?   line[11:8]          :
+                        (counter == 18) ?   line[23:20]         :
+                        (counter == 19) ?   line[19:16]         :
+                        (counter == 20) ?   line[31:28]         :
+                        line[27:24];
+
+    assign douten   = (~ce_n);
+
+    assign done     = (counter == FINAL_COUNT);
+
+
+endmodule
\ No newline at end of file
diff --git a/perip/psram/efabless/EF_PSRAM_CTRL_wb.v b/perip/psram/efabless/EF_PSRAM_CTRL_wb.v
new file mode 100644
index 00000000..739a8cc8
--- /dev/null
+++ b/perip/psram/efabless/EF_PSRAM_CTRL_wb.v
@@ -0,0 +1,170 @@
+/*
+	Copyright 2020 Efabless Corp.
+
+	Author: Mohamed Shalan (mshalan@efabless.com)
+
+	Licensed under the Apache License, Version 2.0 (the "License");
+	you may not use this file except in compliance with the License.
+	You may obtain a copy of the License at:
+	http://www.apache.org/licenses/LICENSE-2.0
+	Unless required by applicable law or agreed to in writing, software
+	distributed under the License is distributed on an "AS IS" BASIS,
+	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+	See the License for the specific language governing permissions and
+	limitations under the License.
+*/
+
+`timescale              1ns/1ps
+`default_nettype        none
+
+// Using EBH Command
+module EF_PSRAM_CTRL_wb (
+    // WB bus Interface
+    input   wire        clk_i,
+    input   wire        rst_i,
+    input   wire [31:0] adr_i,
+    input   wire [31:0] dat_i,
+    output  wire [31:0] dat_o,
+    input   wire [3:0]  sel_i,
+    input   wire        cyc_i,
+    input   wire        stb_i,
+    output  wire        ack_o,
+    input   wire        we_i,
+
+    // External Interface to Quad I/O
+    output  wire            sck,
+    output  wire            ce_n,
+    input   wire [3:0]      din,
+    output  wire [3:0]      dout,
+    output  wire [3:0]      douten
+);
+
+    localparam  ST_IDLE = 1'b0,
+                ST_WAIT = 1'b1;
+
+    wire        mr_sck;
+    wire        mr_ce_n;
+    wire [3:0]  mr_din;
+    wire [3:0]  mr_dout;
+    wire        mr_doe;
+
+    wire        mw_sck;
+    wire        mw_ce_n;
+    wire [3:0]  mw_din;
+    wire [3:0]  mw_dout;
+    wire        mw_doe;
+
+    // PSRAM Reader and Writer wires
+    wire        mr_rd;
+    wire        mr_done;
+    wire        mw_wr;
+    wire        mw_done;
+
+    wire        doe;
+
+    // WB Control Signals
+    wire        wb_valid        =   cyc_i & stb_i;
+    wire        wb_we           =   we_i & wb_valid;
+    wire        wb_re           =   ~we_i & wb_valid;
+    wire[3:0]   wb_byte_sel     =   sel_i & {4{wb_we}};
+
+    // The FSM
+    reg         state, nstate;
+    always @ (posedge clk_i or posedge rst_i)
+        if(rst_i)
+            state <= ST_IDLE;
+        else
+            state <= nstate;
+
+    always @* begin
+        case(state)
+            ST_IDLE :
+                if(wb_valid)
+                    nstate = ST_WAIT;
+                else
+                    nstate = ST_IDLE;
+
+            ST_WAIT :
+                if((mw_done & wb_we) | (mr_done & wb_re))
+                    nstate = ST_IDLE;
+                else
+                    nstate = ST_WAIT;
+        endcase
+    end
+
+    wire [2:0]  size =  (sel_i == 4'b0001) ? 1 :
+                        (sel_i == 4'b0010) ? 1 :
+                        (sel_i == 4'b0100) ? 1 :
+                        (sel_i == 4'b1000) ? 1 :
+                        (sel_i == 4'b0011) ? 2 :
+                        (sel_i == 4'b1100) ? 2 :
+                        (sel_i == 4'b1111) ? 4 : 4;
+
+
+
+    wire [7:0]  byte0 = (sel_i[0])          ? dat_i[7:0]   :
+                        (sel_i[1] & size==1)? dat_i[15:8]  :
+                        (sel_i[2] & size==1)? dat_i[23:16] :
+                        (sel_i[3] & size==1)? dat_i[31:24] :
+                        (sel_i[2] & size==2)? dat_i[23:16] :
+                        dat_i[7:0];
+
+    wire [7:0]  byte1 = (sel_i[1])          ? dat_i[15:8]  :
+                        dat_i[31:24];
+
+    wire [7:0]  byte2 = dat_i[23:16];
+
+    wire [7:0]  byte3 = dat_i[31:24];
+
+    wire [31:0] wdata = {byte3, byte2, byte1, byte0};
+
+    wire [1:0]  waddr = (size==1 && sel_i[0]==1) ? 2'b00 :
+                        (size==1 && sel_i[1]==1) ? 2'b01 :
+                        (size==1 && sel_i[2]==1) ? 2'b10 :
+                        (size==1 && sel_i[3]==1) ? 2'b11 :
+                        (size==2 && sel_i[2]==1) ? 2'b10 :
+                        2'b00;
+
+    assign mr_rd    = ( (state==ST_IDLE ) & wb_re );
+    assign mw_wr    = ( (state==ST_IDLE ) & wb_we );
+
+    PSRAM_READER MR (
+        .clk(clk_i),
+        .rst_n(~rst_i),
+        .addr({adr_i[23:2],2'b0}),
+        .rd(mr_rd),
+        //.size(size), Always read a word
+        .size(3'd4),
+        .done(mr_done),
+        .line(dat_o),
+        .sck(mr_sck),
+        .ce_n(mr_ce_n),
+        .din(mr_din),
+        .dout(mr_dout),
+        .douten(mr_doe)
+    );
+
+    PSRAM_WRITER MW (
+        .clk(clk_i),
+        .rst_n(~rst_i),
+        .addr({adr_i[23:0]}),
+        .wr(mw_wr),
+        .size(size),
+        .done(mw_done),
+        .line(wdata),
+        .sck(mw_sck),
+        .ce_n(mw_ce_n),
+        .din(mw_din),
+        .dout(mw_dout),
+        .douten(mw_doe)
+    );
+
+    assign sck  = wb_we ? mw_sck  : mr_sck;
+    assign ce_n = wb_we ? mw_ce_n : mr_ce_n;
+    assign dout = wb_we ? mw_dout : mr_dout;
+    assign douten  = wb_we ? {4{mw_doe}}  : {4{mr_doe}};
+
+    assign mw_din = din;
+    assign mr_din = din;
+    assign ack_o = wb_we ? mw_done :mr_done ;
+endmodule
diff --git a/perip/psram/efabless/LICENSE b/perip/psram/efabless/LICENSE
new file mode 100644
index 00000000..261eeb9e
--- /dev/null
+++ b/perip/psram/efabless/LICENSE
@@ -0,0 +1,201 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
-- 
2.34.1

