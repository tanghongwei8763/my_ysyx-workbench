From f5ace42a773e31db14e3c603506c37c698cee19c Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Mon, 18 Dec 2023 18:15:22 +0800
Subject: [PATCH 23/74] perip,spi: change port name to match doc

---
 perip/flash/flash.v         | 24 +++++++++++-------------
 perip/spi/rtl/spi_top_apb.v | 10 +++++-----
 src/SoC.scala               |  1 +
 src/device/SPI.scala        |  8 ++++----
 4 files changed, 21 insertions(+), 22 deletions(-)

diff --git a/perip/flash/flash.v b/perip/flash/flash.v
index 2ef4158c..cbb4d762 100644
--- a/perip/flash/flash.v
+++ b/perip/flash/flash.v
@@ -3,18 +3,16 @@
 // Refer to the data sheet for the flash instructions at
 // https://www.winbond.com/hq/product/code-storage-flash-memory/serial-nor-flash/?__locale=zh
 
-`define spi_cs_num 2
-
 module flash (
-  input                    clk,
-  input  [`spi_cs_num-1:0] cs,
-  input                    mosi,
-  output wire              miso
+  input  sck,
+  input  ss,
+  input  mosi,
+  output miso
 );
 
   typedef enum [2:0] { cmd_t, addr_t, data_t, err_t } state_t;
 
-  wire reset; assign reset = cs[0];
+  wire reset; assign reset = ss;
 
   reg [2:0]  state;
   reg [7:0]  counter;
@@ -26,13 +24,13 @@ module flash (
   wire [63:0] rdata;
   wire [63:0] raddr; assign raddr = { 40'd0, addr, 2'd0 };
   FlashRead flashRead (
-    .clock(clk),
+    .clock(sck),
     .ren(ren),
     .addr(raddr),
     .data(rdata)
   );
 
-  always@(posedge clk or posedge reset) begin
+  always@(posedge sck or posedge reset) begin
     if (reset) state <= cmd_t;
     else begin
       case (state)
@@ -50,7 +48,7 @@ module flash (
     end
   end
 
-  always@(posedge clk or posedge reset) begin
+  always@(posedge sck or posedge reset) begin
     if (reset) counter <= 8'd0;
     else begin
       case (state)
@@ -61,18 +59,18 @@ module flash (
     end
   end
 
-  always@(posedge clk or posedge reset) begin
+  always@(posedge sck or posedge reset) begin
     if (reset)               cmd <= 8'd0;
     else if (state == cmd_t) cmd <= { cmd[6:0], mosi };
   end
 
-  always@(posedge clk or posedge reset) begin
+  always@(posedge sck or posedge reset) begin
     if (reset) addr <= 22'd0;
     else if (state == addr_t && counter < 8'd22)
       addr <= { addr[20:0], mosi };
   end
 
-  always@(posedge clk or posedge reset) begin
+  always@(posedge sck or posedge reset) begin
     if (reset) data <= 64'd0;
     else if (state == addr_t && counter == 8'd23)
       data <= {
diff --git a/perip/spi/rtl/spi_top_apb.v b/perip/spi/rtl/spi_top_apb.v
index 217a4897..a04874b6 100644
--- a/perip/spi/rtl/spi_top_apb.v
+++ b/perip/spi/rtl/spi_top_apb.v
@@ -1,7 +1,7 @@
 module spi_top_apb #(
   parameter flash_addr_start = 32'h30000000,
   parameter flash_addr_end   = 32'h3fffffff,
-  parameter spi_cs_num       = 2
+  parameter spi_ss_num       = 2
 ) (
   input         clk,
   input         resetn,
@@ -16,15 +16,15 @@ module spi_top_apb #(
   output [31:0] in_prdata,
   output        in_pslverr,
 
-  output                  spi_clk,
-  output [spi_cs_num-1:0] spi_cs,
+  output                  spi_sck,
+  output [spi_ss_num-1:0] spi_ss,
   output                  spi_mosi,
   input                   spi_miso,
   output                  spi_irq_out
 );
 
 wire [7:0] ss_pad_o;
-assign spi_cs = ss_pad_o[spi_cs_num-1:0];
+assign spi_ss = ss_pad_o[spi_ss_num-1:0];
 
 spi_top u0_spi_top (
   .wb_clk_i(clk),
@@ -41,7 +41,7 @@ spi_top u0_spi_top (
   .wb_int_o(),
 
   .ss_pad_o(ss_pad_o),
-  .sclk_pad_o(spi_clk),
+  .sclk_pad_o(spi_sck),
   .mosi_pad_o(spi_mosi),
   .miso_pad_i(spi_miso)
 );
diff --git a/src/SoC.scala b/src/SoC.scala
index 797e953e..57eb3269 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -121,6 +121,7 @@ class ysyxSoCFull(implicit p: Parameters) extends LazyModule {
     val flash = Module(new flash)
     val uart = IO(chiselTypeOf(masic.uart))
     flash.io <> masic.spi
+    flash.io.ss := masic.spi.ss(0)
     uart <> masic.uart
   }
 }
diff --git a/src/device/SPI.scala b/src/device/SPI.scala
index f1a65acd..93d5a072 100644
--- a/src/device/SPI.scala
+++ b/src/device/SPI.scala
@@ -8,9 +8,9 @@ import org.chipsalliance.cde.config.Parameters
 import freechips.rocketchip.diplomacy._
 import freechips.rocketchip.util._
 
-class SPIIO(val csWidth: Int = 2) extends Bundle {
-  val clk = Output(Bool())
-  val cs = Output(UInt(csWidth.W))
+class SPIIO(val ssWidth: Int = 2) extends Bundle {
+  val sck = Output(Bool())
+  val ss = Output(UInt(ssWidth.W))
   val mosi = Output(Bool())
   val miso = Input(Bool())
 }
@@ -26,7 +26,7 @@ class spi_top_apb extends BlackBox {
 }
 
 class flash extends BlackBox {
-  val io = IO(Flipped(new SPIIO))
+  val io = IO(Flipped(new SPIIO(1)))
 }
 
 class APBSPI(address: Seq[AddressSet])(implicit p: Parameters) extends LazyModule {
-- 
2.34.1

