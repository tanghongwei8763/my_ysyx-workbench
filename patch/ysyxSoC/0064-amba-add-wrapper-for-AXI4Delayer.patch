From 20e27fc231011a2c750a8ce0dea437372303c107 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Wed, 10 Apr 2024 07:41:19 +0800
Subject: [PATCH 64/74] amba: add wrapper for AXI4Delayer

---
 perip/amba/axi4_delayer.v  | 96 ++++++++++++++++++++++++++++++++++++++
 src/SoC.scala              |  2 +-
 src/amba/AXI4Delayer.scala | 48 +++++++++++++++++++
 3 files changed, 145 insertions(+), 1 deletion(-)
 create mode 100644 perip/amba/axi4_delayer.v
 create mode 100644 src/amba/AXI4Delayer.scala

diff --git a/perip/amba/axi4_delayer.v b/perip/amba/axi4_delayer.v
new file mode 100644
index 00000000..18451a2b
--- /dev/null
+++ b/perip/amba/axi4_delayer.v
@@ -0,0 +1,96 @@
+module axi4_delayer(
+  input         clock,
+  input         reset,
+
+  output        in_arready,
+  input         in_arvalid,
+  input  [3:0]  in_arid,
+  input  [31:0] in_araddr,
+  input  [7:0]  in_arlen,
+  input  [2:0]  in_arsize,
+  input  [1:0]  in_arburst,
+  input         in_rready,
+  output        in_rvalid,
+  output [3:0]  in_rid,
+  output [63:0] in_rdata,
+  output [1:0]  in_rresp,
+  output        in_rlast,
+  output        in_awready,
+  input         in_awvalid,
+  input  [3:0]  in_awid,
+  input  [31:0] in_awaddr,
+  input  [7:0]  in_awlen,
+  input  [2:0]  in_awsize,
+  input  [1:0]  in_awburst,
+  output        in_wready,
+  input         in_wvalid,
+  input  [63:0] in_wdata,
+  input  [7:0]  in_wstrb,
+  input         in_wlast,
+                in_bready,
+  output        in_bvalid,
+  output [3:0]  in_bid,
+  output [1:0]  in_bresp,
+
+  input         out_arready,
+  output        out_arvalid,
+  output [3:0]  out_arid,
+  output [31:0] out_araddr,
+  output [7:0]  out_arlen,
+  output [2:0]  out_arsize,
+  output [1:0]  out_arburst,
+  output        out_rready,
+  input         out_rvalid,
+  input  [3:0]  out_rid,
+  input  [63:0] out_rdata,
+  input  [1:0]  out_rresp,
+  input         out_rlast,
+  input         out_awready,
+  output        out_awvalid,
+  output [3:0]  out_awid,
+  output [31:0] out_awaddr,
+  output [7:0]  out_awlen,
+  output [2:0]  out_awsize,
+  output [1:0]  out_awburst,
+  input         out_wready,
+  output        out_wvalid,
+  output [63:0] out_wdata,
+  output [7:0]  out_wstrb,
+  output        out_wlast,
+                out_bready,
+  input         out_bvalid,
+  input  [3:0]  out_bid,
+  input  [1:0]  out_bresp
+);
+
+  assign in_arready = out_arready;
+  assign out_arvalid = in_arvalid;
+  assign out_arid = in_arid;
+  assign out_araddr = in_araddr;
+  assign out_arlen = in_arlen;
+  assign out_arsize = in_arsize;
+  assign out_arburst = in_arburst;
+  assign out_rready = in_rready;
+  assign in_rvalid = out_rvalid;
+  assign in_rid = out_rid;
+  assign in_rdata = out_rdata;
+  assign in_rresp = out_rresp;
+  assign in_rlast = out_rlast;
+  assign in_awready = out_awready;
+  assign out_awvalid = in_awvalid;
+  assign out_awid = in_awid;
+  assign out_awaddr = in_awaddr;
+  assign out_awlen = in_awlen;
+  assign out_awsize = in_awsize;
+  assign out_awburst = in_awburst;
+  assign in_wready = out_wready;
+  assign out_wvalid = in_wvalid;
+  assign out_wdata = in_wdata;
+  assign out_wstrb = in_wstrb;
+  assign out_wlast = in_wlast;
+  assign out_bready = in_bready;
+  assign in_bvalid = out_bvalid;
+  assign in_bid = out_bid;
+  assign in_bresp = out_bresp;
+
+endmodule
diff --git a/src/SoC.scala b/src/SoC.scala
index cd9976fb..80139fa7 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -50,7 +50,7 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   List(lspi.node, luart.node, lpsram.node, lgpio.node, lkeyboard.node, lvga.node).map(_ := apbxbar)
   List(apbxbar := APBDelayer() := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar2)
   xbar2 := AXI4UserYanker(Some(1)) := AXI4Fragmenter() := xbar
-  if (Config.sdramUseAXI) lsdram_axi.get.node := xbar
+  if (Config.sdramUseAXI) lsdram_axi.get.node := ysyx.AXI4Delayer() := xbar
   else                    lsdram_apb.get.node := apbxbar
   if (Config.hasChipLink) chiplinkNode.get := xbar
   xbar := cpu.masterNode
diff --git a/src/amba/AXI4Delayer.scala b/src/amba/AXI4Delayer.scala
new file mode 100644
index 00000000..b8711fa1
--- /dev/null
+++ b/src/amba/AXI4Delayer.scala
@@ -0,0 +1,48 @@
+package ysyx
+
+import chisel3._
+import chisel3.util._
+
+import org.chipsalliance.cde.config.Parameters
+import freechips.rocketchip.amba._
+import freechips.rocketchip.amba.axi4._
+import freechips.rocketchip.diplomacy._
+import freechips.rocketchip.util._
+
+class AXI4DelayerIO extends Bundle {
+  val clock = Input(Clock())
+  val reset = Input(Reset())
+  val in = Flipped(new AXI4Bundle(AXI4BundleParameters(addrBits = 32, dataBits = 64, idBits = 4)))
+  val out = new AXI4Bundle(AXI4BundleParameters(addrBits = 32, dataBits = 64, idBits = 4))
+}
+
+class axi4_delayer extends BlackBox {
+  val io = IO(new AXI4DelayerIO)
+}
+
+class AXI4DelayerChisel extends Module {
+  val io = IO(new AXI4DelayerIO)
+  io.out <> io.in
+}
+
+class AXI4DelayerWrapper(implicit p: Parameters) extends LazyModule {
+  val node = AXI4IdentityNode()
+
+  lazy val module = new Impl
+  class Impl extends LazyModuleImp(this) {
+    (node.in zip node.out) foreach { case ((in, edgeIn), (out, edgeOut)) =>
+      val delayer = Module(new axi4_delayer)
+      delayer.io.clock := clock
+      delayer.io.reset := reset
+      delayer.io.in <> in
+      out <> delayer.io.out
+    }
+  }
+}
+
+object AXI4Delayer {
+  def apply()(implicit p: Parameters): AXI4Node = {
+    val axi4delay = LazyModule(new AXI4DelayerWrapper)
+    axi4delay.node
+  }
+}
-- 
2.34.1

