From af3e49d72bcb8f7c6c7b87bb0d40090f8204ed41 Mon Sep 17 00:00:00 2001
From: Zihao Yu <yuzihao@ict.ac.cn>
Date: Sun, 31 Dec 2023 22:18:33 +0800
Subject: [PATCH 55/74] device: add wrapper for PS2 keyboard

---
 perip/ps2/ps2_top_apb.v   | 19 +++++++++++++++
 src/SoC.scala             |  7 +++++-
 src/device/Keyboard.scala | 51 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 76 insertions(+), 1 deletion(-)
 create mode 100644 perip/ps2/ps2_top_apb.v
 create mode 100644 src/device/Keyboard.scala

diff --git a/perip/ps2/ps2_top_apb.v b/perip/ps2/ps2_top_apb.v
new file mode 100644
index 00000000..080d38fa
--- /dev/null
+++ b/perip/ps2/ps2_top_apb.v
@@ -0,0 +1,19 @@
+module ps2_top_apb(
+  input         clock,
+  input         reset,
+  input  [31:0] in_paddr,
+  input         in_psel,
+  input         in_penable,
+  input  [2:0]  in_pprot,
+  input         in_pwrite,
+  input  [31:0] in_pwdata,
+  input  [3:0]  in_pstrb,
+  output        in_pready,
+  output [31:0] in_prdata,
+  output        in_pslverr,
+
+  input         ps2_clk,
+  input         ps2_data
+);
+
+endmodule
diff --git a/src/SoC.scala b/src/SoC.scala
index 23ca5879..0132be5b 100644
--- a/src/SoC.scala
+++ b/src/SoC.scala
@@ -32,6 +32,7 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
 
   val luart = LazyModule(new APBUart16550(AddressSet.misaligned(0x10000000, 0x1000)))
   val lgpio = LazyModule(new APBGPIO(AddressSet.misaligned(0x10002000, 0x10)))
+  val lkeyboard = LazyModule(new APBKeyboard(AddressSet.misaligned(0x10011000, 0x8)))
   val lspi  = LazyModule(new APBSPI(
     AddressSet.misaligned(0x10001000, 0x1000) ++    // SPI controller
     AddressSet.misaligned(0x30000000, 0x10000000)   // XIP flash
@@ -41,7 +42,7 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
   val sramNode = AXI4RAM(AddressSet.misaligned(0x0f000000, 0x2000).head, false, true, 8, None, Nil, false)
   val lsdram = LazyModule(new APBSDRAM(AddressSet.misaligned(0xa0000000L, 0x2000000)))
 
-  List(lspi.node, luart.node, lpsram.node, lsdram.node, lgpio.node).map(_ := apbxbar)
+  List(lspi.node, luart.node, lpsram.node, lsdram.node, lgpio.node, lkeyboard.node).map(_ := apbxbar)
   List(apbxbar := AXI4ToAPB(), lmrom.node, sramNode).map(_ := xbar)
   if (Config.hasChipLink) chiplinkNode.get := xbar
   xbar := cpu.masterNode
@@ -76,11 +77,13 @@ class ysyxSoCASIC(implicit p: Parameters) extends LazyModule {
     val psram = IO(chiselTypeOf(lpsram.module.qspi_bundle))
     val sdram = IO(chiselTypeOf(lsdram.module.sdram_bundle))
     val gpio = IO(chiselTypeOf(lgpio.module.gpio_bundle))
+    val ps2 = IO(chiselTypeOf(lkeyboard.module.ps2_bundle))
     uart <> luart.module.uart
     spi <> lspi.module.spi_bundle
     psram <> lpsram.module.qspi_bundle
     sdram <> lsdram.module.sdram_bundle
     gpio <> lgpio.module.gpio_bundle
+    ps2 <> lkeyboard.module.ps2_bundle
   }
 }
 
@@ -132,7 +135,9 @@ class ysyxSoCFull(implicit p: Parameters) extends LazyModule {
 
     val externalPins = IO(new Bundle{
       val gpio = chiselTypeOf(masic.gpio)
+      val ps2 = chiselTypeOf(masic.ps2)
     })
     externalPins.gpio <> masic.gpio
+    externalPins.ps2 <> masic.ps2
   }
 }
diff --git a/src/device/Keyboard.scala b/src/device/Keyboard.scala
new file mode 100644
index 00000000..5bd7f5b4
--- /dev/null
+++ b/src/device/Keyboard.scala
@@ -0,0 +1,51 @@
+package ysyx
+
+import chisel3._
+import chisel3.util._
+
+import freechips.rocketchip.amba.apb._
+import org.chipsalliance.cde.config.Parameters
+import freechips.rocketchip.diplomacy._
+import freechips.rocketchip.util._
+
+class PS2IO extends Bundle {
+  val clk = Input(Bool())
+  val data = Input(Bool())
+}
+
+class PS2CtrlIO extends Bundle {
+  val clock = Input(Clock())
+  val reset = Input(Bool())
+  val in = Flipped(new APBBundle(APBBundleParameters(addrBits = 32, dataBits = 32)))
+  val ps2 = new PS2IO
+}
+
+class ps2_top_apb extends BlackBox {
+  val io = IO(new PS2CtrlIO)
+}
+
+class ps2Chisel extends Module {
+  val io = IO(new PS2CtrlIO)
+}
+
+class APBKeyboard(address: Seq[AddressSet])(implicit p: Parameters) extends LazyModule {
+  val node = APBSlaveNode(Seq(APBSlavePortParameters(
+    Seq(APBSlaveParameters(
+      address       = address,
+      executable    = true,
+      supportsRead  = true,
+      supportsWrite = true)),
+    beatBytes  = 4)))
+
+  lazy val module = new Impl
+  class Impl extends LazyModuleImp(this) {
+    val (in, _) = node.in(0)
+    val ps2_bundle = IO(new PS2IO)
+
+    val mps2 = Module(new ps2_top_apb)
+    mps2.io.clock := clock
+    mps2.io.reset := reset
+    mps2.io.in <> in
+    ps2_bundle <> mps2.io.ps2
+  }
+}
-- 
2.34.1

